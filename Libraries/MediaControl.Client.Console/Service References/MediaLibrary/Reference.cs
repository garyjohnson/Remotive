//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30128.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MediaControl.Client.Console.MediaLibrary {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    [System.SerializableAttribute()]
    public partial class Album : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] AlbumArtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReleaseYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] AlbumArt {
            get {
                return this.AlbumArtField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumArtField, value) != true)) {
                    this.AlbumArtField = value;
                    this.RaisePropertyChanged("AlbumArt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistName {
            get {
                return this.ArtistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistNameField, value) != true)) {
                    this.ArtistNameField = value;
                    this.RaisePropertyChanged("ArtistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genre {
            get {
                return this.GenreField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreField, value) != true)) {
                    this.GenreField = value;
                    this.RaisePropertyChanged("Genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReleaseYear {
            get {
                return this.ReleaseYearField;
            }
            set {
                if ((this.ReleaseYearField.Equals(value) != true)) {
                    this.ReleaseYearField = value;
                    this.RaisePropertyChanged("ReleaseYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Artist", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    [System.SerializableAttribute()]
    public partial class Artist : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    [System.SerializableAttribute()]
    public partial class Track : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AlbumNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ArtistNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FilePathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TrackNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumName {
            get {
                return this.AlbumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumNameField, value) != true)) {
                    this.AlbumNameField = value;
                    this.RaisePropertyChanged("AlbumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistName {
            get {
                return this.ArtistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistNameField, value) != true)) {
                    this.ArtistNameField = value;
                    this.RaisePropertyChanged("ArtistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrackNumber {
            get {
                return this.TrackNumberField;
            }
            set {
                if ((this.TrackNumberField.Equals(value) != true)) {
                    this.TrackNumberField = value;
                    this.RaisePropertyChanged("TrackNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", ConfigurationName="MediaLibrary.IMediaLibraryService")]
    public interface IMediaLibraryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbums" +
            "", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbums" +
            "Response")]
        MediaControl.Client.Console.MediaLibrary.GetAlbumsResponse GetAlbums(MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbums" +
            "", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbums" +
            "Response")]
        System.IAsyncResult BeginGetAlbums(MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.Console.MediaLibrary.GetAlbumsResponse EndGetAlbums(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "s", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "sResponse")]
        MediaControl.Client.Console.MediaLibrary.GetArtistsResponse GetArtists(MediaControl.Client.Console.MediaLibrary.GetArtistsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "s", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "sResponse")]
        System.IAsyncResult BeginGetArtists(MediaControl.Client.Console.MediaLibrary.GetArtistsRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.Console.MediaLibrary.GetArtistsResponse EndGetArtists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtists", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtistsResponse")]
        MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsResponse GetAlbumArtists(MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtists", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtistsResponse")]
        System.IAsyncResult BeginGetAlbumArtists(MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsResponse EndGetAlbumArtists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "Response")]
        MediaControl.Client.Console.MediaLibrary.GetTracksResponse GetTracks(MediaControl.Client.Console.MediaLibrary.GetTracksRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "Response")]
        System.IAsyncResult BeginGetTracks(MediaControl.Client.Console.MediaLibrary.GetTracksRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.Console.MediaLibrary.GetTracksResponse EndGetTracks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rt", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtResponse")]
        MediaControl.Client.Console.MediaLibrary.GetAlbumArtResponse GetAlbumArt(MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rt", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtResponse")]
        System.IAsyncResult BeginGetAlbumArt(MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.Console.MediaLibrary.GetAlbumArtResponse EndGetAlbumArt(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbums", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumsRequest {
        
        public GetAlbumsRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumsResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Album> GetAlbumsResult;
        
        public GetAlbumsResponse() {
        }
        
        public GetAlbumsResponse(System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Album> GetAlbumsResult) {
            this.GetAlbumsResult = GetAlbumsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetArtists", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetArtistsRequest {
        
        public GetArtistsRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetArtistsResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetArtistsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Artist> GetArtistsResult;
        
        public GetArtistsResponse() {
        }
        
        public GetArtistsResponse(System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Artist> GetArtistsResult) {
            this.GetArtistsResult = GetArtistsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtists", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtistsRequest {
        
        public GetAlbumArtistsRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtistsResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtistsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Artist> GetAlbumArtistsResult;
        
        public GetAlbumArtistsResponse() {
        }
        
        public GetAlbumArtistsResponse(System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Artist> GetAlbumArtistsResult) {
            this.GetAlbumArtistsResult = GetAlbumArtistsResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracks", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.Console.MediaLibrary.Album album;
        
        public GetTracksRequest() {
        }
        
        public GetTracksRequest(MediaControl.Client.Console.MediaLibrary.Album album) {
            this.album = album;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracksResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Track> GetTracksResult;
        
        public GetTracksResponse() {
        }
        
        public GetTracksResponse(System.Collections.Generic.List<MediaControl.Client.Console.MediaLibrary.Track> GetTracksResult) {
            this.GetTracksResult = GetTracksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArt", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.Console.MediaLibrary.Track track;
        
        public GetAlbumArtRequest() {
        }
        
        public GetAlbumArtRequest(MediaControl.Client.Console.MediaLibrary.Track track) {
            this.track = track;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public byte[] GetAlbumArtResult;
        
        public GetAlbumArtResponse() {
        }
        
        public GetAlbumArtResponse(byte[] GetAlbumArtResult) {
            this.GetAlbumArtResult = GetAlbumArtResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediaLibraryServiceChannel : MediaControl.Client.Console.MediaLibrary.IMediaLibraryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetAlbumsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.Console.MediaLibrary.GetAlbumsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetArtistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetArtistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetArtistsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.Console.MediaLibrary.GetArtistsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumArtistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumArtistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTracksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTracksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetTracksResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.Console.MediaLibrary.GetTracksResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumArtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumArtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetAlbumArtResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.Console.MediaLibrary.GetAlbumArtResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediaLibraryServiceClient : System.ServiceModel.ClientBase<MediaControl.Client.Console.MediaLibrary.IMediaLibraryService>, MediaControl.Client.Console.MediaLibrary.IMediaLibraryService {
        
        private BeginOperationDelegate onBeginGetAlbumsDelegate;
        
        private EndOperationDelegate onEndGetAlbumsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetArtistsDelegate;
        
        private EndOperationDelegate onEndGetArtistsDelegate;
        
        private System.Threading.SendOrPostCallback onGetArtistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumArtistsDelegate;
        
        private EndOperationDelegate onEndGetAlbumArtistsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumArtistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTracksDelegate;
        
        private EndOperationDelegate onEndGetTracksDelegate;
        
        private System.Threading.SendOrPostCallback onGetTracksCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumArtDelegate;
        
        private EndOperationDelegate onEndGetAlbumArtDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumArtCompletedDelegate;
        
        public MediaLibraryServiceClient() {
        }
        
        public MediaLibraryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MediaLibraryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaLibraryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaLibraryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetAlbumsCompletedEventArgs> GetAlbumsCompleted;
        
        public event System.EventHandler<GetArtistsCompletedEventArgs> GetArtistsCompleted;
        
        public event System.EventHandler<GetAlbumArtistsCompletedEventArgs> GetAlbumArtistsCompleted;
        
        public event System.EventHandler<GetTracksCompletedEventArgs> GetTracksCompleted;
        
        public event System.EventHandler<GetAlbumArtCompletedEventArgs> GetAlbumArtCompleted;
        
        public MediaControl.Client.Console.MediaLibrary.GetAlbumsResponse GetAlbums(MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest request) {
            return base.Channel.GetAlbums(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAlbums(MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbums(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MediaControl.Client.Console.MediaLibrary.GetAlbumsResponse EndGetAlbums(System.IAsyncResult result) {
            return base.Channel.EndGetAlbums(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbums(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest request = ((MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest)(inValues[0]));
            return this.BeginGetAlbums(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbums(System.IAsyncResult result) {
            MediaControl.Client.Console.MediaLibrary.GetAlbumsResponse retVal = this.EndGetAlbums(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumsCompleted(object state) {
            if ((this.GetAlbumsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumsCompleted(this, new GetAlbumsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumsAsync(MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest request) {
            this.GetAlbumsAsync(request, null);
        }
        
        public void GetAlbumsAsync(MediaControl.Client.Console.MediaLibrary.GetAlbumsRequest request, object userState) {
            if ((this.onBeginGetAlbumsDelegate == null)) {
                this.onBeginGetAlbumsDelegate = new BeginOperationDelegate(this.OnBeginGetAlbums);
            }
            if ((this.onEndGetAlbumsDelegate == null)) {
                this.onEndGetAlbumsDelegate = new EndOperationDelegate(this.OnEndGetAlbums);
            }
            if ((this.onGetAlbumsCompletedDelegate == null)) {
                this.onGetAlbumsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumsDelegate, new object[] {
                        request}, this.onEndGetAlbumsDelegate, this.onGetAlbumsCompletedDelegate, userState);
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetArtistsResponse GetArtists(MediaControl.Client.Console.MediaLibrary.GetArtistsRequest request) {
            return base.Channel.GetArtists(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetArtists(MediaControl.Client.Console.MediaLibrary.GetArtistsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetArtists(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MediaControl.Client.Console.MediaLibrary.GetArtistsResponse EndGetArtists(System.IAsyncResult result) {
            return base.Channel.EndGetArtists(result);
        }
        
        private System.IAsyncResult OnBeginGetArtists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.Console.MediaLibrary.GetArtistsRequest request = ((MediaControl.Client.Console.MediaLibrary.GetArtistsRequest)(inValues[0]));
            return this.BeginGetArtists(request, callback, asyncState);
        }
        
        private object[] OnEndGetArtists(System.IAsyncResult result) {
            MediaControl.Client.Console.MediaLibrary.GetArtistsResponse retVal = this.EndGetArtists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetArtistsCompleted(object state) {
            if ((this.GetArtistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetArtistsCompleted(this, new GetArtistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetArtistsAsync(MediaControl.Client.Console.MediaLibrary.GetArtistsRequest request) {
            this.GetArtistsAsync(request, null);
        }
        
        public void GetArtistsAsync(MediaControl.Client.Console.MediaLibrary.GetArtistsRequest request, object userState) {
            if ((this.onBeginGetArtistsDelegate == null)) {
                this.onBeginGetArtistsDelegate = new BeginOperationDelegate(this.OnBeginGetArtists);
            }
            if ((this.onEndGetArtistsDelegate == null)) {
                this.onEndGetArtistsDelegate = new EndOperationDelegate(this.OnEndGetArtists);
            }
            if ((this.onGetArtistsCompletedDelegate == null)) {
                this.onGetArtistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetArtistsCompleted);
            }
            base.InvokeAsync(this.onBeginGetArtistsDelegate, new object[] {
                        request}, this.onEndGetArtistsDelegate, this.onGetArtistsCompletedDelegate, userState);
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsResponse GetAlbumArtists(MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest request) {
            return base.Channel.GetAlbumArtists(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAlbumArtists(MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumArtists(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsResponse EndGetAlbumArtists(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumArtists(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumArtists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest request = ((MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest)(inValues[0]));
            return this.BeginGetAlbumArtists(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumArtists(System.IAsyncResult result) {
            MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsResponse retVal = this.EndGetAlbumArtists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumArtistsCompleted(object state) {
            if ((this.GetAlbumArtistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumArtistsCompleted(this, new GetAlbumArtistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumArtistsAsync(MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest request) {
            this.GetAlbumArtistsAsync(request, null);
        }
        
        public void GetAlbumArtistsAsync(MediaControl.Client.Console.MediaLibrary.GetAlbumArtistsRequest request, object userState) {
            if ((this.onBeginGetAlbumArtistsDelegate == null)) {
                this.onBeginGetAlbumArtistsDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumArtists);
            }
            if ((this.onEndGetAlbumArtistsDelegate == null)) {
                this.onEndGetAlbumArtistsDelegate = new EndOperationDelegate(this.OnEndGetAlbumArtists);
            }
            if ((this.onGetAlbumArtistsCompletedDelegate == null)) {
                this.onGetAlbumArtistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumArtistsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumArtistsDelegate, new object[] {
                        request}, this.onEndGetAlbumArtistsDelegate, this.onGetAlbumArtistsCompletedDelegate, userState);
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetTracksResponse GetTracks(MediaControl.Client.Console.MediaLibrary.GetTracksRequest request) {
            return base.Channel.GetTracks(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetTracks(MediaControl.Client.Console.MediaLibrary.GetTracksRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTracks(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MediaControl.Client.Console.MediaLibrary.GetTracksResponse EndGetTracks(System.IAsyncResult result) {
            return base.Channel.EndGetTracks(result);
        }
        
        private System.IAsyncResult OnBeginGetTracks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.Console.MediaLibrary.GetTracksRequest request = ((MediaControl.Client.Console.MediaLibrary.GetTracksRequest)(inValues[0]));
            return this.BeginGetTracks(request, callback, asyncState);
        }
        
        private object[] OnEndGetTracks(System.IAsyncResult result) {
            MediaControl.Client.Console.MediaLibrary.GetTracksResponse retVal = this.EndGetTracks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTracksCompleted(object state) {
            if ((this.GetTracksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTracksCompleted(this, new GetTracksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTracksAsync(MediaControl.Client.Console.MediaLibrary.GetTracksRequest request) {
            this.GetTracksAsync(request, null);
        }
        
        public void GetTracksAsync(MediaControl.Client.Console.MediaLibrary.GetTracksRequest request, object userState) {
            if ((this.onBeginGetTracksDelegate == null)) {
                this.onBeginGetTracksDelegate = new BeginOperationDelegate(this.OnBeginGetTracks);
            }
            if ((this.onEndGetTracksDelegate == null)) {
                this.onEndGetTracksDelegate = new EndOperationDelegate(this.OnEndGetTracks);
            }
            if ((this.onGetTracksCompletedDelegate == null)) {
                this.onGetTracksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTracksCompleted);
            }
            base.InvokeAsync(this.onBeginGetTracksDelegate, new object[] {
                        request}, this.onEndGetTracksDelegate, this.onGetTracksCompletedDelegate, userState);
        }
        
        public MediaControl.Client.Console.MediaLibrary.GetAlbumArtResponse GetAlbumArt(MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest request) {
            return base.Channel.GetAlbumArt(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetAlbumArt(MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumArt(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public MediaControl.Client.Console.MediaLibrary.GetAlbumArtResponse EndGetAlbumArt(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumArt(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumArt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest request = ((MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest)(inValues[0]));
            return this.BeginGetAlbumArt(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumArt(System.IAsyncResult result) {
            MediaControl.Client.Console.MediaLibrary.GetAlbumArtResponse retVal = this.EndGetAlbumArt(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumArtCompleted(object state) {
            if ((this.GetAlbumArtCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumArtCompleted(this, new GetAlbumArtCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumArtAsync(MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest request) {
            this.GetAlbumArtAsync(request, null);
        }
        
        public void GetAlbumArtAsync(MediaControl.Client.Console.MediaLibrary.GetAlbumArtRequest request, object userState) {
            if ((this.onBeginGetAlbumArtDelegate == null)) {
                this.onBeginGetAlbumArtDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumArt);
            }
            if ((this.onEndGetAlbumArtDelegate == null)) {
                this.onEndGetAlbumArtDelegate = new EndOperationDelegate(this.OnEndGetAlbumArt);
            }
            if ((this.onGetAlbumArtCompletedDelegate == null)) {
                this.onGetAlbumArtCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumArtCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumArtDelegate, new object[] {
                        request}, this.onEndGetAlbumArtDelegate, this.onGetAlbumArtCompletedDelegate, userState);
        }
    }
}
