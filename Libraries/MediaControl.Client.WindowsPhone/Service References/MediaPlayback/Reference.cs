//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MediaControl.Client.WindowsPhone.MediaPlayback {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaState", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class MediaState : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CurrentTimeField;
        
        private MediaControl.Client.WindowsPhone.MediaPlayback.Track CurrentTrackField;
        
        private System.TimeSpan PlaybackPositionField;
        
        private MediaControl.Client.WindowsPhone.MediaPlayback.PlaybackState PlaybackStateField;
        
        private double VolumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CurrentTime {
            get {
                return this.CurrentTimeField;
            }
            set {
                if ((this.CurrentTimeField.Equals(value) != true)) {
                    this.CurrentTimeField = value;
                    this.RaisePropertyChanged("CurrentTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MediaControl.Client.WindowsPhone.MediaPlayback.Track CurrentTrack {
            get {
                return this.CurrentTrackField;
            }
            set {
                if ((object.ReferenceEquals(this.CurrentTrackField, value) != true)) {
                    this.CurrentTrackField = value;
                    this.RaisePropertyChanged("CurrentTrack");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan PlaybackPosition {
            get {
                return this.PlaybackPositionField;
            }
            set {
                if ((this.PlaybackPositionField.Equals(value) != true)) {
                    this.PlaybackPositionField = value;
                    this.RaisePropertyChanged("PlaybackPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MediaControl.Client.WindowsPhone.MediaPlayback.PlaybackState PlaybackState {
            get {
                return this.PlaybackStateField;
            }
            set {
                if ((this.PlaybackStateField.Equals(value) != true)) {
                    this.PlaybackStateField = value;
                    this.RaisePropertyChanged("PlaybackState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class Track : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AlbumNameField;
        
        private string ArtistNameField;
        
        private System.TimeSpan DurationField;
        
        private string FilePathField;
        
        private string TitleField;
        
        private int TrackNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumName {
            get {
                return this.AlbumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumNameField, value) != true)) {
                    this.AlbumNameField = value;
                    this.RaisePropertyChanged("AlbumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistName {
            get {
                return this.ArtistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistNameField, value) != true)) {
                    this.ArtistNameField = value;
                    this.RaisePropertyChanged("ArtistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrackNumber {
            get {
                return this.TrackNumberField;
            }
            set {
                if ((this.TrackNumberField.Equals(value) != true)) {
                    this.TrackNumberField = value;
                    this.RaisePropertyChanged("TrackNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlaybackState", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public enum PlaybackState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stop = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Play = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Pause = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FastFoward = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FastFoward2 = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FastFoward3 = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rewind = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rewind2 = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rewind3 = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SlowMotion = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SlowMotion2 = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SlowMotion3 = 12,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Artist", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class Artist : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlbumArtist", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class AlbumArtist : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaPlayback.Album> AlbumsField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaPlayback.Album> Albums {
            get {
                return this.AlbumsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumsField, value) != true)) {
                    this.AlbumsField = value;
                    this.RaisePropertyChanged("Albums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class Album : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] AlbumArtField;
        
        private string ArtistNameField;
        
        private string GenreField;
        
        private string IDField;
        
        private System.DateTime ReleaseYearField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] AlbumArt {
            get {
                return this.AlbumArtField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumArtField, value) != true)) {
                    this.AlbumArtField = value;
                    this.RaisePropertyChanged("AlbumArt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistName {
            get {
                return this.ArtistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistNameField, value) != true)) {
                    this.ArtistNameField = value;
                    this.RaisePropertyChanged("ArtistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genre {
            get {
                return this.GenreField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreField, value) != true)) {
                    this.GenreField = value;
                    this.RaisePropertyChanged("Genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReleaseYear {
            get {
                return this.ReleaseYearField;
            }
            set {
                if ((this.ReleaseYearField.Equals(value) != true)) {
                    this.ReleaseYearField = value;
                    this.RaisePropertyChanged("ReleaseYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaPlaybackCapabilities", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class MediaPlaybackCapabilities : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool IsPlaybackMidlistAvailableField;
        
        private bool IsToggleLoopAvailableField;
        
        private bool IsToggleShuffleAvailableField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPlaybackMidlistAvailable {
            get {
                return this.IsPlaybackMidlistAvailableField;
            }
            set {
                if ((this.IsPlaybackMidlistAvailableField.Equals(value) != true)) {
                    this.IsPlaybackMidlistAvailableField = value;
                    this.RaisePropertyChanged("IsPlaybackMidlistAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsToggleLoopAvailable {
            get {
                return this.IsToggleLoopAvailableField;
            }
            set {
                if ((this.IsToggleLoopAvailableField.Equals(value) != true)) {
                    this.IsToggleLoopAvailableField = value;
                    this.RaisePropertyChanged("IsToggleLoopAvailable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsToggleShuffleAvailable {
            get {
                return this.IsToggleShuffleAvailableField;
            }
            set {
                if ((this.IsToggleShuffleAvailableField.Equals(value) != true)) {
                    this.IsToggleShuffleAvailableField = value;
                    this.RaisePropertyChanged("IsToggleShuffleAvailable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", ConfigurationName="MediaPlayback.IMediaPlaybackService")]
    public interface IMediaPlaybackService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/Play", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayResp" +
            "onse")]
        System.IAsyncResult BeginPlay(MediaControl.Client.WindowsPhone.MediaPlayback.PlayRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse EndPlay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/Pause", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PauseRes" +
            "ponse")]
        System.IAsyncResult BeginPause(MediaControl.Client.WindowsPhone.MediaPlayback.PauseRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse EndPause(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/NextTrac" +
            "k", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/NextTrac" +
            "kResponse")]
        System.IAsyncResult BeginNextTrack(MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse EndNextTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PrevTrac" +
            "k", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PrevTrac" +
            "kResponse")]
        System.IAsyncResult BeginPrevTrack(MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse EndPrevTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayTrac" +
            "k", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayTrac" +
            "kResponse")]
        System.IAsyncResult BeginPlayTrack(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse EndPlayTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/GetMedia" +
            "State", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/GetMedia" +
            "StateResponse")]
        System.IAsyncResult BeginGetMediaState(MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse EndGetMediaState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayTrac" +
            "ks", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayTrac" +
            "ksResponse")]
        System.IAsyncResult BeginPlayTracks(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse EndPlayTracks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayArti" +
            "st", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayArti" +
            "stResponse")]
        System.IAsyncResult BeginPlayArtist(MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse EndPlayArtist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayAlbu" +
            "mArtist", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayAlbu" +
            "mArtistResponse")]
        System.IAsyncResult BeginPlayAlbumArtist(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse EndPlayAlbumArtist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayAlbu" +
            "m", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PlayAlbu" +
            "mResponse")]
        System.IAsyncResult BeginPlayAlbum(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse EndPlayAlbum(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/GetCapab" +
            "ilities", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/GetCapab" +
            "ilitiesResponse")]
        System.IAsyncResult BeginGetCapabilities(MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse EndGetCapabilities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/Ping", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/PingResp" +
            "onse")]
        System.IAsyncResult BeginPing(MediaControl.Client.WindowsPhone.MediaPlayback.PingRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/SetVolum" +
            "e", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaPlaybackService/SetVolum" +
            "eResponse")]
        System.IAsyncResult BeginSetVolume(MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse EndSetVolume(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Play", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayRequest {
        
        public PlayRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayResult;
        
        public PlayResponse() {
        }
        
        public PlayResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayResult) {
            this.PlayResult = PlayResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Pause", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PauseRequest {
        
        public PauseRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PauseResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PauseResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PauseResult;
        
        public PauseResponse() {
        }
        
        public PauseResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PauseResult) {
            this.PauseResult = PauseResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NextTrack", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class NextTrackRequest {
        
        public NextTrackRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="NextTrackResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class NextTrackResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState NextTrackResult;
        
        public NextTrackResponse() {
        }
        
        public NextTrackResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState NextTrackResult) {
            this.NextTrackResult = NextTrackResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PrevTrack", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PrevTrackRequest {
        
        public PrevTrackRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PrevTrackResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PrevTrackResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PrevTrackResult;
        
        public PrevTrackResponse() {
        }
        
        public PrevTrackResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PrevTrackResult) {
            this.PrevTrackResult = PrevTrackResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayTrack", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayTrackRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.Track track;
        
        public PlayTrackRequest() {
        }
        
        public PlayTrackRequest(MediaControl.Client.WindowsPhone.MediaPlayback.Track track) {
            this.track = track;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayTrackResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayTrackResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayTrackResult;
        
        public PlayTrackResponse() {
        }
        
        public PlayTrackResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayTrackResult) {
            this.PlayTrackResult = PlayTrackResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaState", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetMediaStateRequest {
        
        public GetMediaStateRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMediaStateResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetMediaStateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState GetMediaStateResult;
        
        public GetMediaStateResponse() {
        }
        
        public GetMediaStateResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState GetMediaStateResult) {
            this.GetMediaStateResult = GetMediaStateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayTracks", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayTracksRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaPlayback.Track> trackQueue;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=1)]
        public bool enqueue;
        
        public PlayTracksRequest() {
        }
        
        public PlayTracksRequest(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaPlayback.Track> trackQueue, bool enqueue) {
            this.trackQueue = trackQueue;
            this.enqueue = enqueue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayTracksResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayTracksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayTracksResult;
        
        public PlayTracksResponse() {
        }
        
        public PlayTracksResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayTracksResult) {
            this.PlayTracksResult = PlayTracksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayArtist", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.Artist artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=1)]
        public bool enqueue;
        
        public PlayArtistRequest() {
        }
        
        public PlayArtistRequest(MediaControl.Client.WindowsPhone.MediaPlayback.Artist artist, bool enqueue) {
            this.artist = artist;
            this.enqueue = enqueue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayArtistResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayArtistResult;
        
        public PlayArtistResponse() {
        }
        
        public PlayArtistResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayArtistResult) {
            this.PlayArtistResult = PlayArtistResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayAlbumArtist", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayAlbumArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.AlbumArtist artist;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=1)]
        public bool enqueue;
        
        public PlayAlbumArtistRequest() {
        }
        
        public PlayAlbumArtistRequest(MediaControl.Client.WindowsPhone.MediaPlayback.AlbumArtist artist, bool enqueue) {
            this.artist = artist;
            this.enqueue = enqueue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayAlbumArtistResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayAlbumArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayAlbumArtistResult;
        
        public PlayAlbumArtistResponse() {
        }
        
        public PlayAlbumArtistResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayAlbumArtistResult) {
            this.PlayAlbumArtistResult = PlayAlbumArtistResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayAlbum", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayAlbumRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.Album album;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=1)]
        public bool enqueue;
        
        public PlayAlbumRequest() {
        }
        
        public PlayAlbumRequest(MediaControl.Client.WindowsPhone.MediaPlayback.Album album, bool enqueue) {
            this.album = album;
            this.enqueue = enqueue;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PlayAlbumResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PlayAlbumResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayAlbumResult;
        
        public PlayAlbumResponse() {
        }
        
        public PlayAlbumResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState PlayAlbumResult) {
            this.PlayAlbumResult = PlayAlbumResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCapabilities", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetCapabilitiesRequest {
        
        public GetCapabilitiesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCapabilitiesResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetCapabilitiesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaPlaybackCapabilities GetCapabilitiesResult;
        
        public GetCapabilitiesResponse() {
        }
        
        public GetCapabilitiesResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaPlaybackCapabilities GetCapabilitiesResult) {
            this.GetCapabilitiesResult = GetCapabilitiesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Ping", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PingRequest {
        
        public PingRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PingResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PingResponse {
        
        public PingResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetVolume", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class SetVolumeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public double volume;
        
        public SetVolumeRequest() {
        }
        
        public SetVolumeRequest(double volume) {
            this.volume = volume;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetVolumeResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class SetVolumeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaPlayback.MediaState SetVolumeResult;
        
        public SetVolumeResponse() {
        }
        
        public SetVolumeResponse(MediaControl.Client.WindowsPhone.MediaPlayback.MediaState SetVolumeResult) {
            this.SetVolumeResult = SetVolumeResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediaPlaybackServiceChannel : MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PauseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PauseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NextTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public NextTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PrevTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PrevTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMediaStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMediaStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayTracksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayTracksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayAlbumArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayAlbumArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayAlbumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PlayAlbumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCapabilitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCapabilitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetVolumeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetVolumeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediaPlaybackServiceClient : System.ServiceModel.ClientBase<MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService>, MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService {
        
        private BeginOperationDelegate onBeginPlayDelegate;
        
        private EndOperationDelegate onEndPlayDelegate;
        
        private System.Threading.SendOrPostCallback onPlayCompletedDelegate;
        
        private BeginOperationDelegate onBeginPauseDelegate;
        
        private EndOperationDelegate onEndPauseDelegate;
        
        private System.Threading.SendOrPostCallback onPauseCompletedDelegate;
        
        private BeginOperationDelegate onBeginNextTrackDelegate;
        
        private EndOperationDelegate onEndNextTrackDelegate;
        
        private System.Threading.SendOrPostCallback onNextTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginPrevTrackDelegate;
        
        private EndOperationDelegate onEndPrevTrackDelegate;
        
        private System.Threading.SendOrPostCallback onPrevTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayTrackDelegate;
        
        private EndOperationDelegate onEndPlayTrackDelegate;
        
        private System.Threading.SendOrPostCallback onPlayTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMediaStateDelegate;
        
        private EndOperationDelegate onEndGetMediaStateDelegate;
        
        private System.Threading.SendOrPostCallback onGetMediaStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayTracksDelegate;
        
        private EndOperationDelegate onEndPlayTracksDelegate;
        
        private System.Threading.SendOrPostCallback onPlayTracksCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayArtistDelegate;
        
        private EndOperationDelegate onEndPlayArtistDelegate;
        
        private System.Threading.SendOrPostCallback onPlayArtistCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayAlbumArtistDelegate;
        
        private EndOperationDelegate onEndPlayAlbumArtistDelegate;
        
        private System.Threading.SendOrPostCallback onPlayAlbumArtistCompletedDelegate;
        
        private BeginOperationDelegate onBeginPlayAlbumDelegate;
        
        private EndOperationDelegate onEndPlayAlbumDelegate;
        
        private System.Threading.SendOrPostCallback onPlayAlbumCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCapabilitiesDelegate;
        
        private EndOperationDelegate onEndGetCapabilitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCapabilitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetVolumeDelegate;
        
        private EndOperationDelegate onEndSetVolumeDelegate;
        
        private System.Threading.SendOrPostCallback onSetVolumeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MediaPlaybackServiceClient() {
        }
        
        public MediaPlaybackServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MediaPlaybackServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaPlaybackServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaPlaybackServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<PlayCompletedEventArgs> PlayCompleted;
        
        public event System.EventHandler<PauseCompletedEventArgs> PauseCompleted;
        
        public event System.EventHandler<NextTrackCompletedEventArgs> NextTrackCompleted;
        
        public event System.EventHandler<PrevTrackCompletedEventArgs> PrevTrackCompleted;
        
        public event System.EventHandler<PlayTrackCompletedEventArgs> PlayTrackCompleted;
        
        public event System.EventHandler<GetMediaStateCompletedEventArgs> GetMediaStateCompleted;
        
        public event System.EventHandler<PlayTracksCompletedEventArgs> PlayTracksCompleted;
        
        public event System.EventHandler<PlayArtistCompletedEventArgs> PlayArtistCompleted;
        
        public event System.EventHandler<PlayAlbumArtistCompletedEventArgs> PlayAlbumArtistCompleted;
        
        public event System.EventHandler<PlayAlbumCompletedEventArgs> PlayAlbumCompleted;
        
        public event System.EventHandler<GetCapabilitiesCompletedEventArgs> GetCapabilitiesCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<SetVolumeCompletedEventArgs> SetVolumeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPlay(MediaControl.Client.WindowsPhone.MediaPlayback.PlayRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlay(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPlay(System.IAsyncResult result) {
            return base.Channel.EndPlay(result);
        }
        
        private System.IAsyncResult OnBeginPlay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPlay(request, callback, asyncState);
        }
        
        private object[] OnEndPlay(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPlay(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayCompleted(object state) {
            if ((this.PlayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayCompleted(this, new PlayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayRequest request) {
            this.PlayAsync(request, null);
        }
        
        public void PlayAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayRequest request, object userState) {
            if ((this.onBeginPlayDelegate == null)) {
                this.onBeginPlayDelegate = new BeginOperationDelegate(this.OnBeginPlay);
            }
            if ((this.onEndPlayDelegate == null)) {
                this.onEndPlayDelegate = new EndOperationDelegate(this.OnEndPlay);
            }
            if ((this.onPlayCompletedDelegate == null)) {
                this.onPlayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayCompleted);
            }
            base.InvokeAsync(this.onBeginPlayDelegate, new object[] {
                        request}, this.onEndPlayDelegate, this.onPlayCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPause(MediaControl.Client.WindowsPhone.MediaPlayback.PauseRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPause(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPause(System.IAsyncResult result) {
            return base.Channel.EndPause(result);
        }
        
        private System.IAsyncResult OnBeginPause(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PauseRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PauseRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPause(request, callback, asyncState);
        }
        
        private object[] OnEndPause(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPause(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPauseCompleted(object state) {
            if ((this.PauseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PauseCompleted(this, new PauseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PauseAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PauseRequest request) {
            this.PauseAsync(request, null);
        }
        
        public void PauseAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PauseRequest request, object userState) {
            if ((this.onBeginPauseDelegate == null)) {
                this.onBeginPauseDelegate = new BeginOperationDelegate(this.OnBeginPause);
            }
            if ((this.onEndPauseDelegate == null)) {
                this.onEndPauseDelegate = new EndOperationDelegate(this.OnEndPause);
            }
            if ((this.onPauseCompletedDelegate == null)) {
                this.onPauseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPauseCompleted);
            }
            base.InvokeAsync(this.onBeginPauseDelegate, new object[] {
                        request}, this.onEndPauseDelegate, this.onPauseCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginNextTrack(MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNextTrack(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndNextTrack(System.IAsyncResult result) {
            return base.Channel.EndNextTrack(result);
        }
        
        private System.IAsyncResult OnBeginNextTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginNextTrack(request, callback, asyncState);
        }
        
        private object[] OnEndNextTrack(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndNextTrack(result);
            return new object[] {
                    retVal};
        }
        
        private void OnNextTrackCompleted(object state) {
            if ((this.NextTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NextTrackCompleted(this, new NextTrackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NextTrackAsync(MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackRequest request) {
            this.NextTrackAsync(request, null);
        }
        
        public void NextTrackAsync(MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackRequest request, object userState) {
            if ((this.onBeginNextTrackDelegate == null)) {
                this.onBeginNextTrackDelegate = new BeginOperationDelegate(this.OnBeginNextTrack);
            }
            if ((this.onEndNextTrackDelegate == null)) {
                this.onEndNextTrackDelegate = new EndOperationDelegate(this.OnEndNextTrack);
            }
            if ((this.onNextTrackCompletedDelegate == null)) {
                this.onNextTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNextTrackCompleted);
            }
            base.InvokeAsync(this.onBeginNextTrackDelegate, new object[] {
                        request}, this.onEndNextTrackDelegate, this.onNextTrackCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPrevTrack(MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPrevTrack(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPrevTrack(System.IAsyncResult result) {
            return base.Channel.EndPrevTrack(result);
        }
        
        private System.IAsyncResult OnBeginPrevTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPrevTrack(request, callback, asyncState);
        }
        
        private object[] OnEndPrevTrack(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPrevTrack(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPrevTrackCompleted(object state) {
            if ((this.PrevTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PrevTrackCompleted(this, new PrevTrackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PrevTrackAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackRequest request) {
            this.PrevTrackAsync(request, null);
        }
        
        public void PrevTrackAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackRequest request, object userState) {
            if ((this.onBeginPrevTrackDelegate == null)) {
                this.onBeginPrevTrackDelegate = new BeginOperationDelegate(this.OnBeginPrevTrack);
            }
            if ((this.onEndPrevTrackDelegate == null)) {
                this.onEndPrevTrackDelegate = new EndOperationDelegate(this.OnEndPrevTrack);
            }
            if ((this.onPrevTrackCompletedDelegate == null)) {
                this.onPrevTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPrevTrackCompleted);
            }
            base.InvokeAsync(this.onBeginPrevTrackDelegate, new object[] {
                        request}, this.onEndPrevTrackDelegate, this.onPrevTrackCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPlayTrack(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayTrack(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPlayTrack(System.IAsyncResult result) {
            return base.Channel.EndPlayTrack(result);
        }
        
        private System.IAsyncResult OnBeginPlayTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPlayTrack(request, callback, asyncState);
        }
        
        private object[] OnEndPlayTrack(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPlayTrack(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayTrackCompleted(object state) {
            if ((this.PlayTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayTrackCompleted(this, new PlayTrackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayTrackAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackRequest request) {
            this.PlayTrackAsync(request, null);
        }
        
        public void PlayTrackAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackRequest request, object userState) {
            if ((this.onBeginPlayTrackDelegate == null)) {
                this.onBeginPlayTrackDelegate = new BeginOperationDelegate(this.OnBeginPlayTrack);
            }
            if ((this.onEndPlayTrackDelegate == null)) {
                this.onEndPlayTrackDelegate = new EndOperationDelegate(this.OnEndPlayTrack);
            }
            if ((this.onPlayTrackCompletedDelegate == null)) {
                this.onPlayTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayTrackCompleted);
            }
            base.InvokeAsync(this.onBeginPlayTrackDelegate, new object[] {
                        request}, this.onEndPlayTrackDelegate, this.onPlayTrackCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginGetMediaState(MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMediaState(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndGetMediaState(System.IAsyncResult result) {
            return base.Channel.EndGetMediaState(result);
        }
        
        private System.IAsyncResult OnBeginGetMediaState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginGetMediaState(request, callback, asyncState);
        }
        
        private object[] OnEndGetMediaState(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndGetMediaState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMediaStateCompleted(object state) {
            if ((this.GetMediaStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMediaStateCompleted(this, new GetMediaStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMediaStateAsync(MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateRequest request) {
            this.GetMediaStateAsync(request, null);
        }
        
        public void GetMediaStateAsync(MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateRequest request, object userState) {
            if ((this.onBeginGetMediaStateDelegate == null)) {
                this.onBeginGetMediaStateDelegate = new BeginOperationDelegate(this.OnBeginGetMediaState);
            }
            if ((this.onEndGetMediaStateDelegate == null)) {
                this.onEndGetMediaStateDelegate = new EndOperationDelegate(this.OnEndGetMediaState);
            }
            if ((this.onGetMediaStateCompletedDelegate == null)) {
                this.onGetMediaStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMediaStateCompleted);
            }
            base.InvokeAsync(this.onBeginGetMediaStateDelegate, new object[] {
                        request}, this.onEndGetMediaStateDelegate, this.onGetMediaStateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPlayTracks(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayTracks(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPlayTracks(System.IAsyncResult result) {
            return base.Channel.EndPlayTracks(result);
        }
        
        private System.IAsyncResult OnBeginPlayTracks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPlayTracks(request, callback, asyncState);
        }
        
        private object[] OnEndPlayTracks(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPlayTracks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayTracksCompleted(object state) {
            if ((this.PlayTracksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayTracksCompleted(this, new PlayTracksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayTracksAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksRequest request) {
            this.PlayTracksAsync(request, null);
        }
        
        public void PlayTracksAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksRequest request, object userState) {
            if ((this.onBeginPlayTracksDelegate == null)) {
                this.onBeginPlayTracksDelegate = new BeginOperationDelegate(this.OnBeginPlayTracks);
            }
            if ((this.onEndPlayTracksDelegate == null)) {
                this.onEndPlayTracksDelegate = new EndOperationDelegate(this.OnEndPlayTracks);
            }
            if ((this.onPlayTracksCompletedDelegate == null)) {
                this.onPlayTracksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayTracksCompleted);
            }
            base.InvokeAsync(this.onBeginPlayTracksDelegate, new object[] {
                        request}, this.onEndPlayTracksDelegate, this.onPlayTracksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPlayArtist(MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayArtist(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPlayArtist(System.IAsyncResult result) {
            return base.Channel.EndPlayArtist(result);
        }
        
        private System.IAsyncResult OnBeginPlayArtist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPlayArtist(request, callback, asyncState);
        }
        
        private object[] OnEndPlayArtist(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPlayArtist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayArtistCompleted(object state) {
            if ((this.PlayArtistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayArtistCompleted(this, new PlayArtistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayArtistAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistRequest request) {
            this.PlayArtistAsync(request, null);
        }
        
        public void PlayArtistAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistRequest request, object userState) {
            if ((this.onBeginPlayArtistDelegate == null)) {
                this.onBeginPlayArtistDelegate = new BeginOperationDelegate(this.OnBeginPlayArtist);
            }
            if ((this.onEndPlayArtistDelegate == null)) {
                this.onEndPlayArtistDelegate = new EndOperationDelegate(this.OnEndPlayArtist);
            }
            if ((this.onPlayArtistCompletedDelegate == null)) {
                this.onPlayArtistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayArtistCompleted);
            }
            base.InvokeAsync(this.onBeginPlayArtistDelegate, new object[] {
                        request}, this.onEndPlayArtistDelegate, this.onPlayArtistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPlayAlbumArtist(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayAlbumArtist(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPlayAlbumArtist(System.IAsyncResult result) {
            return base.Channel.EndPlayAlbumArtist(result);
        }
        
        private System.IAsyncResult OnBeginPlayAlbumArtist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPlayAlbumArtist(request, callback, asyncState);
        }
        
        private object[] OnEndPlayAlbumArtist(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPlayAlbumArtist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayAlbumArtistCompleted(object state) {
            if ((this.PlayAlbumArtistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayAlbumArtistCompleted(this, new PlayAlbumArtistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayAlbumArtistAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistRequest request) {
            this.PlayAlbumArtistAsync(request, null);
        }
        
        public void PlayAlbumArtistAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistRequest request, object userState) {
            if ((this.onBeginPlayAlbumArtistDelegate == null)) {
                this.onBeginPlayAlbumArtistDelegate = new BeginOperationDelegate(this.OnBeginPlayAlbumArtist);
            }
            if ((this.onEndPlayAlbumArtistDelegate == null)) {
                this.onEndPlayAlbumArtistDelegate = new EndOperationDelegate(this.OnEndPlayAlbumArtist);
            }
            if ((this.onPlayAlbumArtistCompletedDelegate == null)) {
                this.onPlayAlbumArtistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayAlbumArtistCompleted);
            }
            base.InvokeAsync(this.onBeginPlayAlbumArtistDelegate, new object[] {
                        request}, this.onEndPlayAlbumArtistDelegate, this.onPlayAlbumArtistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPlayAlbum(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPlayAlbum(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPlayAlbum(System.IAsyncResult result) {
            return base.Channel.EndPlayAlbum(result);
        }
        
        private System.IAsyncResult OnBeginPlayAlbum(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPlayAlbum(request, callback, asyncState);
        }
        
        private object[] OnEndPlayAlbum(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPlayAlbum(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPlayAlbumCompleted(object state) {
            if ((this.PlayAlbumCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PlayAlbumCompleted(this, new PlayAlbumCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PlayAlbumAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumRequest request) {
            this.PlayAlbumAsync(request, null);
        }
        
        public void PlayAlbumAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumRequest request, object userState) {
            if ((this.onBeginPlayAlbumDelegate == null)) {
                this.onBeginPlayAlbumDelegate = new BeginOperationDelegate(this.OnBeginPlayAlbum);
            }
            if ((this.onEndPlayAlbumDelegate == null)) {
                this.onEndPlayAlbumDelegate = new EndOperationDelegate(this.OnEndPlayAlbum);
            }
            if ((this.onPlayAlbumCompletedDelegate == null)) {
                this.onPlayAlbumCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPlayAlbumCompleted);
            }
            base.InvokeAsync(this.onBeginPlayAlbumDelegate, new object[] {
                        request}, this.onEndPlayAlbumDelegate, this.onPlayAlbumCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginGetCapabilities(MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCapabilities(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndGetCapabilities(System.IAsyncResult result) {
            return base.Channel.EndGetCapabilities(result);
        }
        
        private System.IAsyncResult OnBeginGetCapabilities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginGetCapabilities(request, callback, asyncState);
        }
        
        private object[] OnEndGetCapabilities(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndGetCapabilities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCapabilitiesCompleted(object state) {
            if ((this.GetCapabilitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCapabilitiesCompleted(this, new GetCapabilitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCapabilitiesAsync(MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesRequest request) {
            this.GetCapabilitiesAsync(request, null);
        }
        
        public void GetCapabilitiesAsync(MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesRequest request, object userState) {
            if ((this.onBeginGetCapabilitiesDelegate == null)) {
                this.onBeginGetCapabilitiesDelegate = new BeginOperationDelegate(this.OnBeginGetCapabilities);
            }
            if ((this.onEndGetCapabilitiesDelegate == null)) {
                this.onEndGetCapabilitiesDelegate = new EndOperationDelegate(this.OnEndGetCapabilities);
            }
            if ((this.onGetCapabilitiesCompletedDelegate == null)) {
                this.onGetCapabilitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCapabilitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCapabilitiesDelegate, new object[] {
                        request}, this.onEndGetCapabilitiesDelegate, this.onGetCapabilitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginPing(MediaControl.Client.WindowsPhone.MediaPlayback.PingRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PingRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.PingRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginPing(request, callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PingRequest request) {
            this.PingAsync(request, null);
        }
        
        public void PingAsync(MediaControl.Client.WindowsPhone.MediaPlayback.PingRequest request, object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, new object[] {
                        request}, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.BeginSetVolume(MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetVolume(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService.EndSetVolume(System.IAsyncResult result) {
            return base.Channel.EndSetVolume(result);
        }
        
        private System.IAsyncResult OnBeginSetVolume(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeRequest request = ((MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).BeginSetVolume(request, callback, asyncState);
        }
        
        private object[] OnEndSetVolume(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse retVal = ((MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService)(this)).EndSetVolume(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetVolumeCompleted(object state) {
            if ((this.SetVolumeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetVolumeCompleted(this, new SetVolumeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetVolumeAsync(MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeRequest request) {
            this.SetVolumeAsync(request, null);
        }
        
        public void SetVolumeAsync(MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeRequest request, object userState) {
            if ((this.onBeginSetVolumeDelegate == null)) {
                this.onBeginSetVolumeDelegate = new BeginOperationDelegate(this.OnBeginSetVolume);
            }
            if ((this.onEndSetVolumeDelegate == null)) {
                this.onEndSetVolumeDelegate = new EndOperationDelegate(this.OnEndSetVolume);
            }
            if ((this.onSetVolumeCompletedDelegate == null)) {
                this.onSetVolumeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetVolumeCompleted);
            }
            base.InvokeAsync(this.onBeginSetVolumeDelegate, new object[] {
                        request}, this.onEndSetVolumeDelegate, this.onSetVolumeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService CreateChannel() {
            return new MediaPlaybackServiceClientChannel(this);
        }
        
        private class MediaPlaybackServiceClientChannel : ChannelBase<MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService>, MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService {
            
            public MediaPlaybackServiceClientChannel(System.ServiceModel.ClientBase<MediaControl.Client.WindowsPhone.MediaPlayback.IMediaPlaybackService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginPlay(MediaControl.Client.WindowsPhone.MediaPlayback.PlayRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Play", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse EndPlay(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayResponse)(base.EndInvoke("Play", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPause(MediaControl.Client.WindowsPhone.MediaPlayback.PauseRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Pause", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse EndPause(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PauseResponse)(base.EndInvoke("Pause", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNextTrack(MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("NextTrack", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse EndNextTrack(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.NextTrackResponse)(base.EndInvoke("NextTrack", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPrevTrack(MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("PrevTrack", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse EndPrevTrack(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PrevTrackResponse)(base.EndInvoke("PrevTrack", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlayTrack(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("PlayTrack", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse EndPlayTrack(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayTrackResponse)(base.EndInvoke("PlayTrack", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMediaState(MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetMediaState", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse EndGetMediaState(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.GetMediaStateResponse)(base.EndInvoke("GetMediaState", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlayTracks(MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("PlayTracks", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse EndPlayTracks(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayTracksResponse)(base.EndInvoke("PlayTracks", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlayArtist(MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("PlayArtist", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse EndPlayArtist(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayArtistResponse)(base.EndInvoke("PlayArtist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlayAlbumArtist(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("PlayAlbumArtist", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse EndPlayAlbumArtist(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumArtistResponse)(base.EndInvoke("PlayAlbumArtist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPlayAlbum(MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("PlayAlbum", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse EndPlayAlbum(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PlayAlbumResponse)(base.EndInvoke("PlayAlbum", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCapabilities(MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetCapabilities", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse EndGetCapabilities(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.GetCapabilitiesResponse)(base.EndInvoke("GetCapabilities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPing(MediaControl.Client.WindowsPhone.MediaPlayback.PingRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Ping", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse EndPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.PingResponse)(base.EndInvoke("Ping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetVolume(MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("SetVolume", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse EndSetVolume(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse _result = ((MediaControl.Client.WindowsPhone.MediaPlayback.SetVolumeResponse)(base.EndInvoke("SetVolume", _args, result)));
                return _result;
            }
        }
    }
}
