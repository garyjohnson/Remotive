//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace MediaControl.Client.WindowsPhone.MediaLibrary {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Artist", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class Artist : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Album", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class Album : object, System.ComponentModel.INotifyPropertyChanged {
        
        private byte[] AlbumArtField;
        
        private string ArtistNameField;
        
        private string GenreField;
        
        private string IDField;
        
        private System.DateTime ReleaseYearField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] AlbumArt {
            get {
                return this.AlbumArtField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumArtField, value) != true)) {
                    this.AlbumArtField = value;
                    this.RaisePropertyChanged("AlbumArt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistName {
            get {
                return this.ArtistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistNameField, value) != true)) {
                    this.ArtistNameField = value;
                    this.RaisePropertyChanged("ArtistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genre {
            get {
                return this.GenreField;
            }
            set {
                if ((object.ReferenceEquals(this.GenreField, value) != true)) {
                    this.GenreField = value;
                    this.RaisePropertyChanged("Genre");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReleaseYear {
            get {
                return this.ReleaseYearField;
            }
            set {
                if ((this.ReleaseYearField.Equals(value) != true)) {
                    this.ReleaseYearField = value;
                    this.RaisePropertyChanged("ReleaseYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Track", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class Track : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AlbumNameField;
        
        private string ArtistNameField;
        
        private System.TimeSpan DurationField;
        
        private string FilePathField;
        
        private string TitleField;
        
        private int TrackNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AlbumName {
            get {
                return this.AlbumNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumNameField, value) != true)) {
                    this.AlbumNameField = value;
                    this.RaisePropertyChanged("AlbumName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ArtistName {
            get {
                return this.ArtistNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistNameField, value) != true)) {
                    this.ArtistNameField = value;
                    this.RaisePropertyChanged("ArtistName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath {
            get {
                return this.FilePathField;
            }
            set {
                if ((object.ReferenceEquals(this.FilePathField, value) != true)) {
                    this.FilePathField = value;
                    this.RaisePropertyChanged("FilePath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TrackNumber {
            get {
                return this.TrackNumberField;
            }
            set {
                if ((this.TrackNumberField.Equals(value) != true)) {
                    this.TrackNumberField = value;
                    this.RaisePropertyChanged("TrackNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlbumArtist", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class AlbumArtist : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Album> AlbumsField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Album> Albums {
            get {
                return this.AlbumsField;
            }
            set {
                if ((object.ReferenceEquals(this.AlbumsField, value) != true)) {
                    this.AlbumsField = value;
                    this.RaisePropertyChanged("Albums");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaLibraryCapabilities", Namespace="http://schemas.datacontract.org/2004/07/MediaControl.Common.Music")]
    public partial class MediaLibraryCapabilities : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool IsNowPlayingListAvailableField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNowPlayingListAvailable {
            get {
                return this.IsNowPlayingListAvailableField;
            }
            set {
                if ((this.IsNowPlayingListAvailableField.Equals(value) != true)) {
                    this.IsNowPlayingListAvailableField = value;
                    this.RaisePropertyChanged("IsNowPlayingListAvailable");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Version", Namespace="http://schemas.datacontract.org/2004/07/System")]
    public partial class Version : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int _BuildField;
        
        private int _MajorField;
        
        private int _MinorField;
        
        private int _RevisionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Build {
            get {
                return this._BuildField;
            }
            set {
                if ((this._BuildField.Equals(value) != true)) {
                    this._BuildField = value;
                    this.RaisePropertyChanged("_Build");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Major {
            get {
                return this._MajorField;
            }
            set {
                if ((this._MajorField.Equals(value) != true)) {
                    this._MajorField = value;
                    this.RaisePropertyChanged("_Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Minor {
            get {
                return this._MinorField;
            }
            set {
                if ((this._MinorField.Equals(value) != true)) {
                    this._MinorField = value;
                    this.RaisePropertyChanged("_Minor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int _Revision {
            get {
                return this._RevisionField;
            }
            set {
                if ((this._RevisionField.Equals(value) != true)) {
                    this._RevisionField = value;
                    this.RaisePropertyChanged("_Revision");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", ConfigurationName="MediaLibrary.IMediaLibraryService")]
    public interface IMediaLibraryService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbums" +
            "ByArtist", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbums" +
            "ByArtistResponse")]
        System.IAsyncResult BeginGetAlbumsByArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse EndGetAlbumsByArtist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "Response")]
        System.IAsyncResult BeginGetTracks(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse EndGetTracks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "ByArtist", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "ByArtistResponse")]
        System.IAsyncResult BeginGetTracksByArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse EndGetTracksByArtist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "ByAlbumArtist", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetTracks" +
            "ByAlbumArtistResponse")]
        System.IAsyncResult BeginGetTracksByAlbumArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse EndGetTracksByAlbumArtist(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtByTrack", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtByTrackResponse")]
        System.IAsyncResult BeginGetAlbumArtByTrack(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse EndGetAlbumArtByTrack(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtByAlbum", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtByAlbumResponse")]
        System.IAsyncResult BeginGetAlbumArtByAlbum(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse EndGetAlbumArtByAlbum(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetCapabi" +
            "lities", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetCapabi" +
            "litiesResponse")]
        System.IAsyncResult BeginGetCapabilities(MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse EndGetCapabilities(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/Ping", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/PingRespo" +
            "nse")]
        System.IAsyncResult BeginPing(MediaControl.Client.WindowsPhone.MediaLibrary.PingRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtistCount", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtistCountResponse")]
        System.IAsyncResult BeginGetAlbumArtistCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse EndGetAlbumArtistCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtistRange", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumA" +
            "rtistRangeResponse")]
        System.IAsyncResult BeginGetAlbumArtistRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse EndGetAlbumArtistRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "Count", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "CountResponse")]
        System.IAsyncResult BeginGetArtistCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse EndGetArtistCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "Range", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetArtist" +
            "RangeResponse")]
        System.IAsyncResult BeginGetArtistRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse EndGetArtistRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumC" +
            "ount", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumC" +
            "ountResponse")]
        System.IAsyncResult BeginGetAlbumCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse EndGetAlbumCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumR" +
            "ange", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetAlbumR" +
            "angeResponse")]
        System.IAsyncResult BeginGetAlbumRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse EndGetAlbumRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetServer" +
            "Version", ReplyAction="http://www.ggjonline.com/ServiceModel/MediaControl/IMediaLibraryService/GetServer" +
            "VersionResponse")]
        System.IAsyncResult BeginGetServerVersion(MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionRequest request, System.AsyncCallback callback, object asyncState);
        
        MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse EndGetServerVersion(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumsByArtist", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumsByArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.Artist artist;
        
        public GetAlbumsByArtistRequest() {
        }
        
        public GetAlbumsByArtistRequest(MediaControl.Client.WindowsPhone.MediaLibrary.Artist artist) {
            this.artist = artist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumsByArtistResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumsByArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Album> GetAlbumsByArtistResult;
        
        public GetAlbumsByArtistResponse() {
        }
        
        public GetAlbumsByArtistResponse(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Album> GetAlbumsByArtistResult) {
            this.GetAlbumsByArtistResult = GetAlbumsByArtistResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracks", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.Album album;
        
        public GetTracksRequest() {
        }
        
        public GetTracksRequest(MediaControl.Client.WindowsPhone.MediaLibrary.Album album) {
            this.album = album;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracksResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Track> GetTracksResult;
        
        public GetTracksResponse() {
        }
        
        public GetTracksResponse(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Track> GetTracksResult) {
            this.GetTracksResult = GetTracksResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracksByArtist", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksByArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.Artist artist;
        
        public GetTracksByArtistRequest() {
        }
        
        public GetTracksByArtistRequest(MediaControl.Client.WindowsPhone.MediaLibrary.Artist artist) {
            this.artist = artist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracksByArtistResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksByArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Track> GetTracksByArtistResult;
        
        public GetTracksByArtistResponse() {
        }
        
        public GetTracksByArtistResponse(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Track> GetTracksByArtistResult) {
            this.GetTracksByArtistResult = GetTracksByArtistResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracksByAlbumArtist", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksByAlbumArtistRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.AlbumArtist artist;
        
        public GetTracksByAlbumArtistRequest() {
        }
        
        public GetTracksByAlbumArtistRequest(MediaControl.Client.WindowsPhone.MediaLibrary.AlbumArtist artist) {
            this.artist = artist;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTracksByAlbumArtistResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetTracksByAlbumArtistResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Track> GetTracksByAlbumArtistResult;
        
        public GetTracksByAlbumArtistResponse() {
        }
        
        public GetTracksByAlbumArtistResponse(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Track> GetTracksByAlbumArtistResult) {
            this.GetTracksByAlbumArtistResult = GetTracksByAlbumArtistResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtByTrack", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtByTrackRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.Track track;
        
        public GetAlbumArtByTrackRequest() {
        }
        
        public GetAlbumArtByTrackRequest(MediaControl.Client.WindowsPhone.MediaLibrary.Track track) {
            this.track = track;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtByTrackResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtByTrackResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public byte[] GetAlbumArtByTrackResult;
        
        public GetAlbumArtByTrackResponse() {
        }
        
        public GetAlbumArtByTrackResponse(byte[] GetAlbumArtByTrackResult) {
            this.GetAlbumArtByTrackResult = GetAlbumArtByTrackResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtByAlbum", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtByAlbumRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.Album album;
        
        public GetAlbumArtByAlbumRequest() {
        }
        
        public GetAlbumArtByAlbumRequest(MediaControl.Client.WindowsPhone.MediaLibrary.Album album) {
            this.album = album;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtByAlbumResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtByAlbumResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public byte[] GetAlbumArtByAlbumResult;
        
        public GetAlbumArtByAlbumResponse() {
        }
        
        public GetAlbumArtByAlbumResponse(byte[] GetAlbumArtByAlbumResult) {
            this.GetAlbumArtByAlbumResult = GetAlbumArtByAlbumResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCapabilities", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetCapabilitiesRequest {
        
        public GetCapabilitiesRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCapabilitiesResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetCapabilitiesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.MediaLibraryCapabilities GetCapabilitiesResult;
        
        public GetCapabilitiesResponse() {
        }
        
        public GetCapabilitiesResponse(MediaControl.Client.WindowsPhone.MediaLibrary.MediaLibraryCapabilities GetCapabilitiesResult) {
            this.GetCapabilitiesResult = GetCapabilitiesResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Ping", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PingRequest {
        
        public PingRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="PingResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class PingResponse {
        
        public PingResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtistCount", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtistCountRequest {
        
        public GetAlbumArtistCountRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtistCountResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtistCountResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public int GetAlbumArtistCountResult;
        
        public GetAlbumArtistCountResponse() {
        }
        
        public GetAlbumArtistCountResponse(int GetAlbumArtistCountResult) {
            this.GetAlbumArtistCountResult = GetAlbumArtistCountResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtistRange", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtistRangeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public int index;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=1)]
        public int count;
        
        public GetAlbumArtistRangeRequest() {
        }
        
        public GetAlbumArtistRangeRequest(int index, int count) {
            this.index = index;
            this.count = count;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumArtistRangeResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumArtistRangeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.AlbumArtist> GetAlbumArtistRangeResult;
        
        public GetAlbumArtistRangeResponse() {
        }
        
        public GetAlbumArtistRangeResponse(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.AlbumArtist> GetAlbumArtistRangeResult) {
            this.GetAlbumArtistRangeResult = GetAlbumArtistRangeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetArtistCount", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetArtistCountRequest {
        
        public GetArtistCountRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetArtistCountResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetArtistCountResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public int GetArtistCountResult;
        
        public GetArtistCountResponse() {
        }
        
        public GetArtistCountResponse(int GetArtistCountResult) {
            this.GetArtistCountResult = GetArtistCountResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetArtistRange", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetArtistRangeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public int index;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=1)]
        public int count;
        
        public GetArtistRangeRequest() {
        }
        
        public GetArtistRangeRequest(int index, int count) {
            this.index = index;
            this.count = count;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetArtistRangeResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetArtistRangeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Artist> GetArtistRangeResult;
        
        public GetArtistRangeResponse() {
        }
        
        public GetArtistRangeResponse(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Artist> GetArtistRangeResult) {
            this.GetArtistRangeResult = GetArtistRangeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumCount", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumCountRequest {
        
        public GetAlbumCountRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumCountResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumCountResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public int GetAlbumCountResult;
        
        public GetAlbumCountResponse() {
        }
        
        public GetAlbumCountResponse(int GetAlbumCountResult) {
            this.GetAlbumCountResult = GetAlbumCountResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumRange", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumRangeRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public int index;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=1)]
        public int count;
        
        public GetAlbumRangeRequest() {
        }
        
        public GetAlbumRangeRequest(int index, int count) {
            this.index = index;
            this.count = count;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAlbumRangeResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetAlbumRangeResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Album> GetAlbumRangeResult;
        
        public GetAlbumRangeResponse() {
        }
        
        public GetAlbumRangeResponse(System.Collections.Generic.List<MediaControl.Client.WindowsPhone.MediaLibrary.Album> GetAlbumRangeResult) {
            this.GetAlbumRangeResult = GetAlbumRangeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServerVersion", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetServerVersionRequest {
        
        public GetServerVersionRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServerVersionResponse", WrapperNamespace="http://www.ggjonline.com/ServiceModel/MediaControl", IsWrapped=true)]
    public partial class GetServerVersionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.ggjonline.com/ServiceModel/MediaControl", Order=0)]
        public MediaControl.Client.WindowsPhone.MediaLibrary.Version GetServerVersionResult;
        
        public GetServerVersionResponse() {
        }
        
        public GetServerVersionResponse(MediaControl.Client.WindowsPhone.MediaLibrary.Version GetServerVersionResult) {
            this.GetServerVersionResult = GetServerVersionResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMediaLibraryServiceChannel : MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumsByArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumsByArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTracksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTracksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTracksByArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTracksByArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTracksByAlbumArtistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTracksByAlbumArtistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumArtByTrackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumArtByTrackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumArtByAlbumCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumArtByAlbumCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCapabilitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCapabilitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumArtistCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumArtistCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumArtistRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumArtistRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetArtistCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetArtistCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetArtistRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetArtistRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAlbumRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAlbumRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MediaLibraryServiceClient : System.ServiceModel.ClientBase<MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService>, MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService {
        
        private BeginOperationDelegate onBeginGetAlbumsByArtistDelegate;
        
        private EndOperationDelegate onEndGetAlbumsByArtistDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumsByArtistCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTracksDelegate;
        
        private EndOperationDelegate onEndGetTracksDelegate;
        
        private System.Threading.SendOrPostCallback onGetTracksCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTracksByArtistDelegate;
        
        private EndOperationDelegate onEndGetTracksByArtistDelegate;
        
        private System.Threading.SendOrPostCallback onGetTracksByArtistCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTracksByAlbumArtistDelegate;
        
        private EndOperationDelegate onEndGetTracksByAlbumArtistDelegate;
        
        private System.Threading.SendOrPostCallback onGetTracksByAlbumArtistCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumArtByTrackDelegate;
        
        private EndOperationDelegate onEndGetAlbumArtByTrackDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumArtByTrackCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumArtByAlbumDelegate;
        
        private EndOperationDelegate onEndGetAlbumArtByAlbumDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumArtByAlbumCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCapabilitiesDelegate;
        
        private EndOperationDelegate onEndGetCapabilitiesDelegate;
        
        private System.Threading.SendOrPostCallback onGetCapabilitiesCompletedDelegate;
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumArtistCountDelegate;
        
        private EndOperationDelegate onEndGetAlbumArtistCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumArtistCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumArtistRangeDelegate;
        
        private EndOperationDelegate onEndGetAlbumArtistRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumArtistRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetArtistCountDelegate;
        
        private EndOperationDelegate onEndGetArtistCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetArtistCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetArtistRangeDelegate;
        
        private EndOperationDelegate onEndGetArtistRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetArtistRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumCountDelegate;
        
        private EndOperationDelegate onEndGetAlbumCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAlbumRangeDelegate;
        
        private EndOperationDelegate onEndGetAlbumRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetAlbumRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerVersionDelegate;
        
        private EndOperationDelegate onEndGetServerVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MediaLibraryServiceClient() {
        }
        
        public MediaLibraryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MediaLibraryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaLibraryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MediaLibraryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAlbumsByArtistCompletedEventArgs> GetAlbumsByArtistCompleted;
        
        public event System.EventHandler<GetTracksCompletedEventArgs> GetTracksCompleted;
        
        public event System.EventHandler<GetTracksByArtistCompletedEventArgs> GetTracksByArtistCompleted;
        
        public event System.EventHandler<GetTracksByAlbumArtistCompletedEventArgs> GetTracksByAlbumArtistCompleted;
        
        public event System.EventHandler<GetAlbumArtByTrackCompletedEventArgs> GetAlbumArtByTrackCompleted;
        
        public event System.EventHandler<GetAlbumArtByAlbumCompletedEventArgs> GetAlbumArtByAlbumCompleted;
        
        public event System.EventHandler<GetCapabilitiesCompletedEventArgs> GetCapabilitiesCompleted;
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<GetAlbumArtistCountCompletedEventArgs> GetAlbumArtistCountCompleted;
        
        public event System.EventHandler<GetAlbumArtistRangeCompletedEventArgs> GetAlbumArtistRangeCompleted;
        
        public event System.EventHandler<GetArtistCountCompletedEventArgs> GetArtistCountCompleted;
        
        public event System.EventHandler<GetArtistRangeCompletedEventArgs> GetArtistRangeCompleted;
        
        public event System.EventHandler<GetAlbumCountCompletedEventArgs> GetAlbumCountCompleted;
        
        public event System.EventHandler<GetAlbumRangeCompletedEventArgs> GetAlbumRangeCompleted;
        
        public event System.EventHandler<GetServerVersionCompletedEventArgs> GetServerVersionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetAlbumsByArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumsByArtist(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetAlbumsByArtist(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumsByArtist(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumsByArtist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetAlbumsByArtist(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumsByArtist(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetAlbumsByArtist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumsByArtistCompleted(object state) {
            if ((this.GetAlbumsByArtistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumsByArtistCompleted(this, new GetAlbumsByArtistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumsByArtistAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistRequest request) {
            this.GetAlbumsByArtistAsync(request, null);
        }
        
        public void GetAlbumsByArtistAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistRequest request, object userState) {
            if ((this.onBeginGetAlbumsByArtistDelegate == null)) {
                this.onBeginGetAlbumsByArtistDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumsByArtist);
            }
            if ((this.onEndGetAlbumsByArtistDelegate == null)) {
                this.onEndGetAlbumsByArtistDelegate = new EndOperationDelegate(this.OnEndGetAlbumsByArtist);
            }
            if ((this.onGetAlbumsByArtistCompletedDelegate == null)) {
                this.onGetAlbumsByArtistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumsByArtistCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumsByArtistDelegate, new object[] {
                        request}, this.onEndGetAlbumsByArtistDelegate, this.onGetAlbumsByArtistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetTracks(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTracks(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetTracks(System.IAsyncResult result) {
            return base.Channel.EndGetTracks(result);
        }
        
        private System.IAsyncResult OnBeginGetTracks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetTracks(request, callback, asyncState);
        }
        
        private object[] OnEndGetTracks(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetTracks(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTracksCompleted(object state) {
            if ((this.GetTracksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTracksCompleted(this, new GetTracksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTracksAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksRequest request) {
            this.GetTracksAsync(request, null);
        }
        
        public void GetTracksAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksRequest request, object userState) {
            if ((this.onBeginGetTracksDelegate == null)) {
                this.onBeginGetTracksDelegate = new BeginOperationDelegate(this.OnBeginGetTracks);
            }
            if ((this.onEndGetTracksDelegate == null)) {
                this.onEndGetTracksDelegate = new EndOperationDelegate(this.OnEndGetTracks);
            }
            if ((this.onGetTracksCompletedDelegate == null)) {
                this.onGetTracksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTracksCompleted);
            }
            base.InvokeAsync(this.onBeginGetTracksDelegate, new object[] {
                        request}, this.onEndGetTracksDelegate, this.onGetTracksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetTracksByArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTracksByArtist(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetTracksByArtist(System.IAsyncResult result) {
            return base.Channel.EndGetTracksByArtist(result);
        }
        
        private System.IAsyncResult OnBeginGetTracksByArtist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetTracksByArtist(request, callback, asyncState);
        }
        
        private object[] OnEndGetTracksByArtist(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetTracksByArtist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTracksByArtistCompleted(object state) {
            if ((this.GetTracksByArtistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTracksByArtistCompleted(this, new GetTracksByArtistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTracksByArtistAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistRequest request) {
            this.GetTracksByArtistAsync(request, null);
        }
        
        public void GetTracksByArtistAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistRequest request, object userState) {
            if ((this.onBeginGetTracksByArtistDelegate == null)) {
                this.onBeginGetTracksByArtistDelegate = new BeginOperationDelegate(this.OnBeginGetTracksByArtist);
            }
            if ((this.onEndGetTracksByArtistDelegate == null)) {
                this.onEndGetTracksByArtistDelegate = new EndOperationDelegate(this.OnEndGetTracksByArtist);
            }
            if ((this.onGetTracksByArtistCompletedDelegate == null)) {
                this.onGetTracksByArtistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTracksByArtistCompleted);
            }
            base.InvokeAsync(this.onBeginGetTracksByArtistDelegate, new object[] {
                        request}, this.onEndGetTracksByArtistDelegate, this.onGetTracksByArtistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetTracksByAlbumArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTracksByAlbumArtist(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetTracksByAlbumArtist(System.IAsyncResult result) {
            return base.Channel.EndGetTracksByAlbumArtist(result);
        }
        
        private System.IAsyncResult OnBeginGetTracksByAlbumArtist(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetTracksByAlbumArtist(request, callback, asyncState);
        }
        
        private object[] OnEndGetTracksByAlbumArtist(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetTracksByAlbumArtist(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTracksByAlbumArtistCompleted(object state) {
            if ((this.GetTracksByAlbumArtistCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTracksByAlbumArtistCompleted(this, new GetTracksByAlbumArtistCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTracksByAlbumArtistAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistRequest request) {
            this.GetTracksByAlbumArtistAsync(request, null);
        }
        
        public void GetTracksByAlbumArtistAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistRequest request, object userState) {
            if ((this.onBeginGetTracksByAlbumArtistDelegate == null)) {
                this.onBeginGetTracksByAlbumArtistDelegate = new BeginOperationDelegate(this.OnBeginGetTracksByAlbumArtist);
            }
            if ((this.onEndGetTracksByAlbumArtistDelegate == null)) {
                this.onEndGetTracksByAlbumArtistDelegate = new EndOperationDelegate(this.OnEndGetTracksByAlbumArtist);
            }
            if ((this.onGetTracksByAlbumArtistCompletedDelegate == null)) {
                this.onGetTracksByAlbumArtistCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTracksByAlbumArtistCompleted);
            }
            base.InvokeAsync(this.onBeginGetTracksByAlbumArtistDelegate, new object[] {
                        request}, this.onEndGetTracksByAlbumArtistDelegate, this.onGetTracksByAlbumArtistCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetAlbumArtByTrack(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumArtByTrack(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetAlbumArtByTrack(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumArtByTrack(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumArtByTrack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetAlbumArtByTrack(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumArtByTrack(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetAlbumArtByTrack(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumArtByTrackCompleted(object state) {
            if ((this.GetAlbumArtByTrackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumArtByTrackCompleted(this, new GetAlbumArtByTrackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumArtByTrackAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackRequest request) {
            this.GetAlbumArtByTrackAsync(request, null);
        }
        
        public void GetAlbumArtByTrackAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackRequest request, object userState) {
            if ((this.onBeginGetAlbumArtByTrackDelegate == null)) {
                this.onBeginGetAlbumArtByTrackDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumArtByTrack);
            }
            if ((this.onEndGetAlbumArtByTrackDelegate == null)) {
                this.onEndGetAlbumArtByTrackDelegate = new EndOperationDelegate(this.OnEndGetAlbumArtByTrack);
            }
            if ((this.onGetAlbumArtByTrackCompletedDelegate == null)) {
                this.onGetAlbumArtByTrackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumArtByTrackCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumArtByTrackDelegate, new object[] {
                        request}, this.onEndGetAlbumArtByTrackDelegate, this.onGetAlbumArtByTrackCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetAlbumArtByAlbum(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumArtByAlbum(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetAlbumArtByAlbum(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumArtByAlbum(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumArtByAlbum(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetAlbumArtByAlbum(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumArtByAlbum(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetAlbumArtByAlbum(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumArtByAlbumCompleted(object state) {
            if ((this.GetAlbumArtByAlbumCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumArtByAlbumCompleted(this, new GetAlbumArtByAlbumCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumArtByAlbumAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumRequest request) {
            this.GetAlbumArtByAlbumAsync(request, null);
        }
        
        public void GetAlbumArtByAlbumAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumRequest request, object userState) {
            if ((this.onBeginGetAlbumArtByAlbumDelegate == null)) {
                this.onBeginGetAlbumArtByAlbumDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumArtByAlbum);
            }
            if ((this.onEndGetAlbumArtByAlbumDelegate == null)) {
                this.onEndGetAlbumArtByAlbumDelegate = new EndOperationDelegate(this.OnEndGetAlbumArtByAlbum);
            }
            if ((this.onGetAlbumArtByAlbumCompletedDelegate == null)) {
                this.onGetAlbumArtByAlbumCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumArtByAlbumCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumArtByAlbumDelegate, new object[] {
                        request}, this.onEndGetAlbumArtByAlbumDelegate, this.onGetAlbumArtByAlbumCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetCapabilities(MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCapabilities(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetCapabilities(System.IAsyncResult result) {
            return base.Channel.EndGetCapabilities(result);
        }
        
        private System.IAsyncResult OnBeginGetCapabilities(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetCapabilities(request, callback, asyncState);
        }
        
        private object[] OnEndGetCapabilities(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetCapabilities(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCapabilitiesCompleted(object state) {
            if ((this.GetCapabilitiesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCapabilitiesCompleted(this, new GetCapabilitiesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCapabilitiesAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesRequest request) {
            this.GetCapabilitiesAsync(request, null);
        }
        
        public void GetCapabilitiesAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesRequest request, object userState) {
            if ((this.onBeginGetCapabilitiesDelegate == null)) {
                this.onBeginGetCapabilitiesDelegate = new BeginOperationDelegate(this.OnBeginGetCapabilities);
            }
            if ((this.onEndGetCapabilitiesDelegate == null)) {
                this.onEndGetCapabilitiesDelegate = new EndOperationDelegate(this.OnEndGetCapabilities);
            }
            if ((this.onGetCapabilitiesCompletedDelegate == null)) {
                this.onGetCapabilitiesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCapabilitiesCompleted);
            }
            base.InvokeAsync(this.onBeginGetCapabilitiesDelegate, new object[] {
                        request}, this.onEndGetCapabilitiesDelegate, this.onGetCapabilitiesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginPing(MediaControl.Client.WindowsPhone.MediaLibrary.PingRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.PingRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.PingRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginPing(request, callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync(MediaControl.Client.WindowsPhone.MediaLibrary.PingRequest request) {
            this.PingAsync(request, null);
        }
        
        public void PingAsync(MediaControl.Client.WindowsPhone.MediaLibrary.PingRequest request, object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, new object[] {
                        request}, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetAlbumArtistCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumArtistCount(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetAlbumArtistCount(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumArtistCount(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumArtistCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetAlbumArtistCount(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumArtistCount(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetAlbumArtistCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumArtistCountCompleted(object state) {
            if ((this.GetAlbumArtistCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumArtistCountCompleted(this, new GetAlbumArtistCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumArtistCountAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountRequest request) {
            this.GetAlbumArtistCountAsync(request, null);
        }
        
        public void GetAlbumArtistCountAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountRequest request, object userState) {
            if ((this.onBeginGetAlbumArtistCountDelegate == null)) {
                this.onBeginGetAlbumArtistCountDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumArtistCount);
            }
            if ((this.onEndGetAlbumArtistCountDelegate == null)) {
                this.onEndGetAlbumArtistCountDelegate = new EndOperationDelegate(this.OnEndGetAlbumArtistCount);
            }
            if ((this.onGetAlbumArtistCountCompletedDelegate == null)) {
                this.onGetAlbumArtistCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumArtistCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumArtistCountDelegate, new object[] {
                        request}, this.onEndGetAlbumArtistCountDelegate, this.onGetAlbumArtistCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetAlbumArtistRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumArtistRange(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetAlbumArtistRange(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumArtistRange(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumArtistRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetAlbumArtistRange(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumArtistRange(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetAlbumArtistRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumArtistRangeCompleted(object state) {
            if ((this.GetAlbumArtistRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumArtistRangeCompleted(this, new GetAlbumArtistRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumArtistRangeAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeRequest request) {
            this.GetAlbumArtistRangeAsync(request, null);
        }
        
        public void GetAlbumArtistRangeAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeRequest request, object userState) {
            if ((this.onBeginGetAlbumArtistRangeDelegate == null)) {
                this.onBeginGetAlbumArtistRangeDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumArtistRange);
            }
            if ((this.onEndGetAlbumArtistRangeDelegate == null)) {
                this.onEndGetAlbumArtistRangeDelegate = new EndOperationDelegate(this.OnEndGetAlbumArtistRange);
            }
            if ((this.onGetAlbumArtistRangeCompletedDelegate == null)) {
                this.onGetAlbumArtistRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumArtistRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumArtistRangeDelegate, new object[] {
                        request}, this.onEndGetAlbumArtistRangeDelegate, this.onGetAlbumArtistRangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetArtistCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetArtistCount(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetArtistCount(System.IAsyncResult result) {
            return base.Channel.EndGetArtistCount(result);
        }
        
        private System.IAsyncResult OnBeginGetArtistCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetArtistCount(request, callback, asyncState);
        }
        
        private object[] OnEndGetArtistCount(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetArtistCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetArtistCountCompleted(object state) {
            if ((this.GetArtistCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetArtistCountCompleted(this, new GetArtistCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetArtistCountAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountRequest request) {
            this.GetArtistCountAsync(request, null);
        }
        
        public void GetArtistCountAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountRequest request, object userState) {
            if ((this.onBeginGetArtistCountDelegate == null)) {
                this.onBeginGetArtistCountDelegate = new BeginOperationDelegate(this.OnBeginGetArtistCount);
            }
            if ((this.onEndGetArtistCountDelegate == null)) {
                this.onEndGetArtistCountDelegate = new EndOperationDelegate(this.OnEndGetArtistCount);
            }
            if ((this.onGetArtistCountCompletedDelegate == null)) {
                this.onGetArtistCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetArtistCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetArtistCountDelegate, new object[] {
                        request}, this.onEndGetArtistCountDelegate, this.onGetArtistCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetArtistRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetArtistRange(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetArtistRange(System.IAsyncResult result) {
            return base.Channel.EndGetArtistRange(result);
        }
        
        private System.IAsyncResult OnBeginGetArtistRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetArtistRange(request, callback, asyncState);
        }
        
        private object[] OnEndGetArtistRange(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetArtistRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetArtistRangeCompleted(object state) {
            if ((this.GetArtistRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetArtistRangeCompleted(this, new GetArtistRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetArtistRangeAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeRequest request) {
            this.GetArtistRangeAsync(request, null);
        }
        
        public void GetArtistRangeAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeRequest request, object userState) {
            if ((this.onBeginGetArtistRangeDelegate == null)) {
                this.onBeginGetArtistRangeDelegate = new BeginOperationDelegate(this.OnBeginGetArtistRange);
            }
            if ((this.onEndGetArtistRangeDelegate == null)) {
                this.onEndGetArtistRangeDelegate = new EndOperationDelegate(this.OnEndGetArtistRange);
            }
            if ((this.onGetArtistRangeCompletedDelegate == null)) {
                this.onGetArtistRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetArtistRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetArtistRangeDelegate, new object[] {
                        request}, this.onEndGetArtistRangeDelegate, this.onGetArtistRangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetAlbumCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumCount(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetAlbumCount(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumCount(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetAlbumCount(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumCount(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetAlbumCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumCountCompleted(object state) {
            if ((this.GetAlbumCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumCountCompleted(this, new GetAlbumCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumCountAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountRequest request) {
            this.GetAlbumCountAsync(request, null);
        }
        
        public void GetAlbumCountAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountRequest request, object userState) {
            if ((this.onBeginGetAlbumCountDelegate == null)) {
                this.onBeginGetAlbumCountDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumCount);
            }
            if ((this.onEndGetAlbumCountDelegate == null)) {
                this.onEndGetAlbumCountDelegate = new EndOperationDelegate(this.OnEndGetAlbumCount);
            }
            if ((this.onGetAlbumCountCompletedDelegate == null)) {
                this.onGetAlbumCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumCountDelegate, new object[] {
                        request}, this.onEndGetAlbumCountDelegate, this.onGetAlbumCountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetAlbumRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAlbumRange(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetAlbumRange(System.IAsyncResult result) {
            return base.Channel.EndGetAlbumRange(result);
        }
        
        private System.IAsyncResult OnBeginGetAlbumRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetAlbumRange(request, callback, asyncState);
        }
        
        private object[] OnEndGetAlbumRange(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetAlbumRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAlbumRangeCompleted(object state) {
            if ((this.GetAlbumRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAlbumRangeCompleted(this, new GetAlbumRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAlbumRangeAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeRequest request) {
            this.GetAlbumRangeAsync(request, null);
        }
        
        public void GetAlbumRangeAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeRequest request, object userState) {
            if ((this.onBeginGetAlbumRangeDelegate == null)) {
                this.onBeginGetAlbumRangeDelegate = new BeginOperationDelegate(this.OnBeginGetAlbumRange);
            }
            if ((this.onEndGetAlbumRangeDelegate == null)) {
                this.onEndGetAlbumRangeDelegate = new EndOperationDelegate(this.OnEndGetAlbumRange);
            }
            if ((this.onGetAlbumRangeCompletedDelegate == null)) {
                this.onGetAlbumRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAlbumRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetAlbumRangeDelegate, new object[] {
                        request}, this.onEndGetAlbumRangeDelegate, this.onGetAlbumRangeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.BeginGetServerVersion(MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerVersion(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService.EndGetServerVersion(System.IAsyncResult result) {
            return base.Channel.EndGetServerVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetServerVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionRequest request = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionRequest)(inValues[0]));
            return ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).BeginGetServerVersion(request, callback, asyncState);
        }
        
        private object[] OnEndGetServerVersion(System.IAsyncResult result) {
            MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse retVal = ((MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService)(this)).EndGetServerVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerVersionCompleted(object state) {
            if ((this.GetServerVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerVersionCompleted(this, new GetServerVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerVersionAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionRequest request) {
            this.GetServerVersionAsync(request, null);
        }
        
        public void GetServerVersionAsync(MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionRequest request, object userState) {
            if ((this.onBeginGetServerVersionDelegate == null)) {
                this.onBeginGetServerVersionDelegate = new BeginOperationDelegate(this.OnBeginGetServerVersion);
            }
            if ((this.onEndGetServerVersionDelegate == null)) {
                this.onEndGetServerVersionDelegate = new EndOperationDelegate(this.OnEndGetServerVersion);
            }
            if ((this.onGetServerVersionCompletedDelegate == null)) {
                this.onGetServerVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerVersionDelegate, new object[] {
                        request}, this.onEndGetServerVersionDelegate, this.onGetServerVersionCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService CreateChannel() {
            return new MediaLibraryServiceClientChannel(this);
        }
        
        private class MediaLibraryServiceClientChannel : ChannelBase<MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService>, MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService {
            
            public MediaLibraryServiceClientChannel(System.ServiceModel.ClientBase<MediaControl.Client.WindowsPhone.MediaLibrary.IMediaLibraryService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAlbumsByArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumsByArtist", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse EndGetAlbumsByArtist(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumsByArtistResponse)(base.EndInvoke("GetAlbumsByArtist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTracks(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetTracks", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse EndGetTracks(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksResponse)(base.EndInvoke("GetTracks", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTracksByArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetTracksByArtist", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse EndGetTracksByArtist(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByArtistResponse)(base.EndInvoke("GetTracksByArtist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTracksByAlbumArtist(MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetTracksByAlbumArtist", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse EndGetTracksByAlbumArtist(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetTracksByAlbumArtistResponse)(base.EndInvoke("GetTracksByAlbumArtist", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlbumArtByTrack(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumArtByTrack", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse EndGetAlbumArtByTrack(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByTrackResponse)(base.EndInvoke("GetAlbumArtByTrack", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlbumArtByAlbum(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumArtByAlbum", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse EndGetAlbumArtByAlbum(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtByAlbumResponse)(base.EndInvoke("GetAlbumArtByAlbum", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCapabilities(MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetCapabilities", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse EndGetCapabilities(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetCapabilitiesResponse)(base.EndInvoke("GetCapabilities", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginPing(MediaControl.Client.WindowsPhone.MediaLibrary.PingRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("Ping", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse EndPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.PingResponse)(base.EndInvoke("Ping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlbumArtistCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumArtistCount", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse EndGetAlbumArtistCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistCountResponse)(base.EndInvoke("GetAlbumArtistCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlbumArtistRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumArtistRange", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse EndGetAlbumArtistRange(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumArtistRangeResponse)(base.EndInvoke("GetAlbumArtistRange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetArtistCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetArtistCount", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse EndGetArtistCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistCountResponse)(base.EndInvoke("GetArtistCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetArtistRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetArtistRange", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse EndGetArtistRange(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetArtistRangeResponse)(base.EndInvoke("GetArtistRange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlbumCount(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumCount", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse EndGetAlbumCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumCountResponse)(base.EndInvoke("GetAlbumCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAlbumRange(MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetAlbumRange", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse EndGetAlbumRange(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetAlbumRangeResponse)(base.EndInvoke("GetAlbumRange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServerVersion(MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetServerVersion", _args, callback, asyncState);
                return _result;
            }
            
            public MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse EndGetServerVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse _result = ((MediaControl.Client.WindowsPhone.MediaLibrary.GetServerVersionResponse)(base.EndInvoke("GetServerVersion", _args, result)));
                return _result;
            }
        }
    }
}
